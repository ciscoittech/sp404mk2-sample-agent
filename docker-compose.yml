services:
  # Backend API service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sp404-backend
    ports:
      - "8000:8000"
    environment:
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - DATABASE_URL=sqlite+aiosqlite:///./data/sp404.db
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here-change-in-production}
      - BACKEND_CORS_ORIGINS=["http://localhost:8000","http://localhost:3000","http://localhost:5173"]
    volumes:
      - ./downloads:/app/downloads
      - ./data:/app/data
      - ./backend:/app/backend:ro
      - ./frontend:/app/frontend:ro
      - ./src:/app/src:ro
    networks:
      - sp404-network
    restart: unless-stopped

  # Database initialization service
  db-init:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sp404-db-init
    command: python backend/scripts/init_db_docker.py
    environment:
      - DATABASE_URL=sqlite+aiosqlite:///./data/sp404.db
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here-change-in-production}
    volumes:
      - ./data:/app/data
    networks:
      - sp404-network
    profiles:
      - init

  # Frontend dev server (optional)
  frontend-dev:
    image: node:20-alpine
    container_name: sp404-frontend-dev
    working_dir: /app
    command: npm run dev -- --host 0.0.0.0
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
    networks:
      - sp404-network
    profiles:
      - dev

  # Playwright test runner
  playwright:
    build:
      context: .
      dockerfile: Dockerfile.playwright
    container_name: sp404-playwright
    environment:
      - BASE_URL=http://backend:8000
    volumes:
      - ./frontend/tests:/app/tests
      - ./frontend/test-results:/app/test-results
      - ./frontend/playwright-report:/app/playwright-report
    networks:
      - sp404-network
    depends_on:
      - backend
    profiles:
      - test

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: sp404-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - sp404-network
    profiles:
      - full

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    container_name: sp404-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    networks:
      - sp404-network
    depends_on:
      - backend
    profiles:
      - production

networks:
  sp404-network:
    driver: bridge

volumes:
  redis-data:
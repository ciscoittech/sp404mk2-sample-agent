[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "sp404mk2-sample-agent"
version = "0.1.0"
description = "AI-powered sample collection agent for SP404MK2 drum machine"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "bhunt", email = ""},
]
keywords = ["sp404mk2", "sampling", "music-production", "ai-agents", "pydantic-ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio",
]

dependencies = [
    # Core
    "pydantic-ai>=0.0.1",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Database
    "libsql-client>=0.3.0",  # Turso client
    "sqlalchemy>=2.0.0",
    
    # AI/ML
    "openai>=1.0.0",  # For OpenRouter
    "httpx>=0.25.0",
    
    # Audio
    "yt-dlp>=2024.1.0",
    "librosa>=0.10.0",
    "soundfile>=0.12.0",
    "numpy>=1.24.0",
    
    # CLI & Utils
    "typer>=0.9.0",
    "rich>=13.0.0",
    "python-dotenv>=1.0.0",
    
    # Development
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pre-commit>=3.5.0",
    "ipython>=8.17.0",
]

[project.scripts]
sp404agent = "sp404mk2_agent.cli:app"

[project.urls]
Homepage = "https://github.com/ciscoittech/sp404mk2-sample-agent"
Documentation = "https://github.com/ciscoittech/sp404mk2-sample-agent/tree/main/docs"
Repository = "https://github.com/ciscoittech/sp404mk2-sample-agent"
Issues = "https://github.com/ciscoittech/sp404mk2-sample-agent/issues"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "UP",  # pyupgrade
    "S",   # flake8-bandit
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T20", # flake8-print
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
]
ignore = [
    "S101",  # Use of assert (needed for tests)
    "T201",  # Print statements (needed for CLI)
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "T201"]
"src/*/cli.py" = ["T201"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
no_implicit_reexport = true
namespace_packages = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "librosa.*",
    "soundfile.*",
    "yt_dlp.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
addopts = [
    "--strict-markers",
    "--verbose",
    "--asyncio-mode=auto",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''